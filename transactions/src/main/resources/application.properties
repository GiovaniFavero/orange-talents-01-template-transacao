spring.datasource.driverClassName=org.postgresql.Driver
spring.datasource.url=  ${DATABASE_URL:jdbc:postgresql://localhost:5436/transactions}
spring.datasource.username= ${DATABASE_USER}
spring.datasource.password= ${DATABASE_PASSWORD}
spring.jpa.hibernate.ddl-auto=update

spring.kafka.bootstrap-servers=${KAFKA_HOST}

# Formato da chave (String) recebida!
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer

# Formato da mensagem \ evento (JSON) recebida(o)!
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer

# Identificador do grupo de consumo
spring.kafka.consumer.group-id=${KAFKA_CONSUMER_GROUP_ID:transactions}

# Modelo de coleta do consumidor (latest, earliest, none)
spring.kafka.consumer.auto-offset-reset=${KAFKA_AUTO-OFFSET-RESET:latest}

spring.kafka.topic.transactions=transacoes

server.port=7854

## spring security resource server configuration
spring.security.oauth2.resourceserver.jwt.issuer-uri=${KEYCLOAK_ISSUER_URI:http://localhost:18080/auth/realms/proposals}
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=${KEYCLOAK_JWKS_URI:http://localhost:18080/auth/realms/proposals/protocol/openid-connect/certs}

logging.level.org.springframework.security=DEBUG